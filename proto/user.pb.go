// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type TokenInfo struct {
	IsValid              bool     `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenInfo) Reset()         { *m = TokenInfo{} }
func (m *TokenInfo) String() string { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()    {}
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{1}
}

func (m *TokenInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenInfo.Unmarshal(m, b)
}
func (m *TokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenInfo.Marshal(b, m, deterministic)
}
func (m *TokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfo.Merge(m, src)
}
func (m *TokenInfo) XXX_Size() int {
	return xxx_messageInfo_TokenInfo.Size(m)
}
func (m *TokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfo proto.InternalMessageInfo

func (m *TokenInfo) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *TokenInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterType((*TokenInfo)(nil), "user.TokenInfo")
}

func init() { proto.RegisterFile("proto/user.proto", fileDescriptor_d570e3e37e5899c5) }

var fileDescriptor_d570e3e37e5899c5 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x2d, 0x4e, 0x2d, 0xd2, 0x03, 0x33, 0x85, 0x58, 0x40, 0x6c, 0x25, 0x3b, 0x2e,
	0x96, 0xd0, 0xe2, 0xd4, 0x22, 0x21, 0x29, 0x2e, 0x0e, 0x10, 0x3f, 0x2f, 0x31, 0x37, 0x55, 0x82,
	0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xce, 0x07, 0xc9, 0x15, 0x24, 0x16, 0x17, 0x97, 0xe7, 0x17,
	0xa5, 0x48, 0x30, 0x41, 0xe4, 0x60, 0x7c, 0x25, 0x6b, 0x2e, 0xce, 0x90, 0xfc, 0xec, 0xd4, 0x3c,
	0xcf, 0xbc, 0xb4, 0x7c, 0x21, 0x09, 0x2e, 0xf6, 0xcc, 0xe2, 0xb0, 0xc4, 0x9c, 0xcc, 0x14, 0xb0,
	0x19, 0x1c, 0x41, 0x30, 0xae, 0x90, 0x08, 0x17, 0x6b, 0x09, 0x48, 0x19, 0x54, 0x3f, 0x84, 0x63,
	0x94, 0xc9, 0xc5, 0x1c, 0x9c, 0x58, 0x29, 0xa4, 0xcb, 0xc5, 0xe3, 0x58, 0x5a, 0x92, 0x91, 0x9a,
	0x57, 0x92, 0x99, 0x9c, 0x58, 0x92, 0x2a, 0xc4, 0xa5, 0x07, 0x76, 0x26, 0xc8, 0x5d, 0x52, 0xfc,
	0x10, 0x36, 0xdc, 0x0e, 0x25, 0x06, 0x21, 0x63, 0x2e, 0x5e, 0xb0, 0xa1, 0x89, 0x25, 0xa9, 0x60,
	0x61, 0x21, 0x74, 0x35, 0x58, 0x34, 0x25, 0xb1, 0x81, 0x3d, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xd8, 0xfe, 0x51, 0x1b, 0x08, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Say service

type SayClient interface {
	Authenticate(ctx context.Context, in *User, opts ...client.CallOption) (*TokenInfo, error)
	ValidateToken(ctx context.Context, in *TokenInfo, opts ...client.CallOption) (*TokenInfo, error)
}

type sayClient struct {
	c           client.Client
	serviceName string
}

func NewSayClient(serviceName string, c client.Client) SayClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "user"
	}
	return &sayClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *sayClient) Authenticate(ctx context.Context, in *User, opts ...client.CallOption) (*TokenInfo, error) {
	req := c.c.NewRequest(c.serviceName, "Say.Authenticate", in)
	out := new(TokenInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sayClient) ValidateToken(ctx context.Context, in *TokenInfo, opts ...client.CallOption) (*TokenInfo, error) {
	req := c.c.NewRequest(c.serviceName, "Say.ValidateToken", in)
	out := new(TokenInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Say service

type SayHandler interface {
	Authenticate(context.Context, *User, *TokenInfo) error
	ValidateToken(context.Context, *TokenInfo, *TokenInfo) error
}

func RegisterSayHandler(s server.Server, hdlr SayHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Say{hdlr}, opts...))
}

type Say struct {
	SayHandler
}

func (h *Say) Authenticate(ctx context.Context, in *User, out *TokenInfo) error {
	return h.SayHandler.Authenticate(ctx, in, out)
}

func (h *Say) ValidateToken(ctx context.Context, in *TokenInfo, out *TokenInfo) error {
	return h.SayHandler.ValidateToken(ctx, in, out)
}
